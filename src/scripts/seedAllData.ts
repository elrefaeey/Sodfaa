import { collection, addDoc, getDocs, doc, setDoc } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import { products, categories } from '@/data/products';

// Collections
const PRODUCTS_COLLECTION = 'products';
const CATEGORIES_COLLECTION = 'categories';
const OFFERS_COLLECTION = 'offers';
const HERO_IMAGES_COLLECTION = 'heroImages';
const BANNER_TEXT_COLLECTION = 'bannerText';
const DISCOUNT_CODES_COLLECTION = 'discountCodes';
const DELIVERY_AREAS_COLLECTION = 'deliveryAreas';

// Sample data for collections
const sampleOffers = [
  {
    title: "ÿÆÿµŸÖ 20% ÿπŸÑŸâ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ≠ŸÇÿßÿ¶ÿ®",
    description: "ÿßÿ≠ÿµŸÑ ÿπŸÑŸâ ÿÆÿµŸÖ 20% ÿπŸÑŸâ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ≠ŸÇÿßÿ¶ÿ® ÿßŸÑÿ¨ŸÑÿØŸäÿ© ÿßŸÑŸÅÿßÿÆÿ±ÿ©",
    discountPercentage: 20,
    isActive: true,
    startDate: new Date(),
    endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now
    applicableProducts: [], // Empty means all products
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    title: "ÿπÿ±ÿ∂ ÿÆÿßÿµ ÿπŸÑŸâ ÿßŸÑÿ≠ŸÇÿßÿ¶ÿ® ÿßŸÑÿµÿ∫Ÿäÿ±ÿ©",
    description: "ÿÆÿµŸÖ 15% ÿπŸÑŸâ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ≠ŸÇÿßÿ¶ÿ® ÿßŸÑÿµÿ∫Ÿäÿ±ÿ© ŸàÿßŸÑŸÉŸÑÿßÿ™ÿ¥",
    discountPercentage: 15,
    isActive: true,
    startDate: new Date(),
    endDate: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000), // 15 days from now
    applicableProducts: [], // Empty means all products
    createdAt: new Date(),
    updatedAt: new Date()
  }
];

const sampleHeroImages = [
  {
    url: "/api/placeholder/1200/600",
    alt: "Sodfaa||ÿµŸèÿØŸÅÿ©ÿ© - Luxury Bags Collection",
    title: "ŸÖÿ¨ŸÖŸàÿπÿ© ÿßŸÑÿ≠ŸÇÿßÿ¶ÿ® ÿßŸÑŸÅÿßÿÆÿ±ÿ©",
    subtitle: "ÿßŸÉÿ™ÿ¥ŸÅ ÿßŸÑÿ£ŸÜÿßŸÇÿ© ŸàÿßŸÑÿ¨ŸàÿØÿ© ŸÅŸä ŸÉŸÑ ŸÇÿ∑ÿπÿ©",
    isActive: true,
    order: 1,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    url: "/api/placeholder/1200/600",
    alt: "Sodfaa||ÿµŸèÿØŸÅÿ©ÿ© - Premium Leather Bags",
    title: "ÿ≠ŸÇÿßÿ¶ÿ® ÿ¨ŸÑÿØŸäÿ© ŸÅÿßÿÆÿ±ÿ©",
    subtitle: "ÿµŸÜÿßÿπÿ© ŸäÿØŸàŸäÿ© ÿ®ÿ¨ŸàÿØÿ© ÿπÿßŸÑŸäÿ©",
    isActive: true,
    order: 2,
    createdAt: new Date(),
    updatedAt: new Date()
  }
];

const sampleBannerText = [
  {
    text: "ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ ŸÅŸä Sodfaa||ÿµŸèÿØŸÅÿ©ÿ© - Ÿàÿ¨Ÿáÿ™ŸÉ ŸÑŸÑÿ≠ŸÇÿßÿ¶ÿ® ÿßŸÑŸÅÿßÿÆÿ±ÿ©",
    isActive: true,
    order: 1,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    text: "ÿ¥ÿ≠ŸÜ ŸÖÿ¨ÿßŸÜŸä ŸÑŸÑÿ∑ŸÑÿ®ÿßÿ™ ÿ£ŸÉÿ´ÿ± ŸÖŸÜ 500 ÿ¨ŸÜŸäŸá",
    isActive: true,
    order: 2,
    createdAt: new Date(),
    updatedAt: new Date()
  }
];

const sampleDiscountCodes = [
  {
    code: "WELCOME10",
    description: "ÿÆÿµŸÖ 10% ŸÑŸÑÿπŸÖŸÑÿßÿ° ÿßŸÑÿ¨ÿØÿØ",
    discountPercentage: 10,
    isActive: true,
    usageLimit: 100,
    usedCount: 0,
    startDate: new Date(),
    endDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 days from now
    minimumOrderAmount: 200,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    code: "SAVE20",
    description: "ÿÆÿµŸÖ 20% ÿπŸÑŸâ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ÿ£ŸÉÿ´ÿ± ŸÖŸÜ 500 ÿ¨ŸÜŸäŸá",
    discountPercentage: 20,
    isActive: true,
    usageLimit: 50,
    usedCount: 0,
    startDate: new Date(),
    endDate: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000), // 60 days from now
    minimumOrderAmount: 500,
    createdAt: new Date(),
    updatedAt: new Date()
  }
];

const sampleDeliveryAreas = [
  {
    name: "ÿßŸÑŸÇÿßŸáÿ±ÿ©",
    governorate: "ÿßŸÑŸÇÿßŸáÿ±ÿ©",
    deliveryFee: 30,
    isActive: true,
    estimatedDays: 1,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    name: "ÿßŸÑÿ¨Ÿäÿ≤ÿ©",
    governorate: "ÿßŸÑÿ¨Ÿäÿ≤ÿ©",
    deliveryFee: 35,
    isActive: true,
    estimatedDays: 1,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    name: "ÿßŸÑÿ•ÿ≥ŸÉŸÜÿØÿ±Ÿäÿ©",
    governorate: "ÿßŸÑÿ•ÿ≥ŸÉŸÜÿØÿ±Ÿäÿ©",
    deliveryFee: 40,
    isActive: true,
    estimatedDays: 2,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    name: "ÿßŸÑŸÖŸÜÿµŸàÿ±ÿ©",
    governorate: "ÿßŸÑÿØŸÇŸáŸÑŸäÿ©",
    deliveryFee: 50,
    isActive: true,
    estimatedDays: 2,
    createdAt: new Date(),
    updatedAt: new Date()
  }
];

export const seedAllData = async () => {
  try {
    console.log('üöÄ Starting comprehensive Firestore seeding...');

    // Seed Categories
    console.log('üìÅ Seeding categories...');
    const categoriesRef = collection(db, CATEGORIES_COLLECTION);
    const existingCategories = await getDocs(categoriesRef);

    if (existingCategories.size === 0) {
      const categoryPromises = categories.map(async (category) => {
        const { id, ...categoryData } = category;
        return addDoc(categoriesRef, {
          ...categoryData,
          createdAt: new Date(),
          updatedAt: new Date()
        });
      });
      await Promise.all(categoryPromises);
      console.log(`‚úÖ Successfully seeded ${categories.length} categories!`);
    } else {
      console.log('‚è≠Ô∏è Categories already exist. Skipping...');
    }

    // Seed Products
    console.log('üõçÔ∏è Seeding products...');
    const productsRef = collection(db, PRODUCTS_COLLECTION);
    const existingProducts = await getDocs(productsRef);

    if (existingProducts.size === 0) {
      const productPromises = products.map(async (product) => {
        const { id, ...productData } = product;
        return addDoc(productsRef, {
          ...productData,
          createdAt: new Date(),
          updatedAt: new Date()
        });
      });
      await Promise.all(productPromises);
      console.log(`‚úÖ Successfully seeded ${products.length} products!`);
    } else {
      console.log('‚è≠Ô∏è Products already exist. Skipping...');
    }

    // Seed Offers
    console.log('üéØ Seeding offers...');
    const offersRef = collection(db, OFFERS_COLLECTION);
    const existingOffers = await getDocs(offersRef);

    if (existingOffers.size === 0) {
      const offerPromises = sampleOffers.map(async (offer) => {
        return addDoc(offersRef, offer);
      });
      await Promise.all(offerPromises);
      console.log(`‚úÖ Successfully seeded ${sampleOffers.length} offers!`);
    } else {
      console.log('‚è≠Ô∏è Offers already exist. Skipping...');
    }

    // Seed Hero Images
    console.log('üñºÔ∏è Seeding hero images...');
    const heroImagesRef = collection(db, HERO_IMAGES_COLLECTION);
    const existingHeroImages = await getDocs(heroImagesRef);

    if (existingHeroImages.size === 0) {
      const heroImagePromises = sampleHeroImages.map(async (heroImage) => {
        return addDoc(heroImagesRef, heroImage);
      });
      await Promise.all(heroImagePromises);
      console.log(`‚úÖ Successfully seeded ${sampleHeroImages.length} hero images!`);
    } else {
      console.log('‚è≠Ô∏è Hero images already exist. Skipping...');
    }

    // Seed Banner Text
    console.log('üì¢ Seeding banner text...');
    const bannerTextRef = collection(db, BANNER_TEXT_COLLECTION);
    const existingBannerText = await getDocs(bannerTextRef);

    if (existingBannerText.size === 0) {
      const bannerTextPromises = sampleBannerText.map(async (bannerText) => {
        return addDoc(bannerTextRef, bannerText);
      });
      await Promise.all(bannerTextPromises);
      console.log(`‚úÖ Successfully seeded ${sampleBannerText.length} banner texts!`);
    } else {
      console.log('‚è≠Ô∏è Banner text already exist. Skipping...');
    }

    // Seed Discount Codes
    console.log('üé´ Seeding discount codes...');
    const discountCodesRef = collection(db, DISCOUNT_CODES_COLLECTION);
    const existingDiscountCodes = await getDocs(discountCodesRef);

    if (existingDiscountCodes.size === 0) {
      const discountCodePromises = sampleDiscountCodes.map(async (discountCode) => {
        return addDoc(discountCodesRef, discountCode);
      });
      await Promise.all(discountCodePromises);
      console.log(`‚úÖ Successfully seeded ${sampleDiscountCodes.length} discount codes!`);
    } else {
      console.log('‚è≠Ô∏è Discount codes already exist. Skipping...');
    }

    // Seed Delivery Areas
    console.log('üöö Seeding delivery areas...');
    const deliveryAreasRef = collection(db, DELIVERY_AREAS_COLLECTION);
    const existingDeliveryAreas = await getDocs(deliveryAreasRef);

    if (existingDeliveryAreas.size === 0) {
      const deliveryAreaPromises = sampleDeliveryAreas.map(async (deliveryArea) => {
        return addDoc(deliveryAreasRef, deliveryArea);
      });
      await Promise.all(deliveryAreaPromises);
      console.log(`‚úÖ Successfully seeded ${sampleDeliveryAreas.length} delivery areas!`);
    } else {
      console.log('‚è≠Ô∏è Delivery areas already exist. Skipping...');
    }

    console.log('üéâ All data seeding completed successfully!');
    return true;
  } catch (error) {
    console.error('‚ùå Error seeding data:', error);
    throw error;
  }
};

// Function to call from browser console for manual seeding
if (typeof window !== 'undefined') {
  (window as any).seedAllData = seedAllData;
}


